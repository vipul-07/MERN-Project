{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/apple/projects/restapi/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/apple/projects/restapi/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/apple/projects/restapi/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _get = require(\"/Users/apple/projects/restapi/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/Users/apple/projects/restapi/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/apple/projects/restapi/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Manager = void 0;\n\nvar eio = require(\"engine.io-client\");\n\nvar socket_1 = require(\"./socket\");\n\nvar Emitter = require(\"component-emitter\");\n\nvar parser = require(\"socket.io-parser\");\n\nvar on_1 = require(\"./on\");\n\nvar bind = require(\"component-bind\");\n\nvar Backoff = require(\"backo2\");\n\nvar debug = require(\"debug\")(\"socket.io-client:manager\");\n\nvar Manager = /*#__PURE__*/function (_Emitter) {\n  _inherits(Manager, _Emitter);\n\n  function Manager(uri, opts) {\n    var _this;\n\n    _classCallCheck(this, Manager);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Manager).call(this));\n    _this.nsps = {};\n    _this.subs = [];\n    _this.connecting = [];\n\n    if (uri && \"object\" === typeof uri) {\n      opts = uri;\n      uri = undefined;\n    }\n\n    opts = opts || {};\n    opts.path = opts.path || \"/socket.io\";\n    _this.opts = opts;\n\n    _this.reconnection(opts.reconnection !== false);\n\n    _this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n\n    _this.reconnectionDelay(opts.reconnectionDelay || 1000);\n\n    _this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n\n    _this.randomizationFactor(opts.randomizationFactor || 0.5);\n\n    _this.backoff = new Backoff({\n      min: _this.reconnectionDelay(),\n      max: _this.reconnectionDelayMax(),\n      jitter: _this.randomizationFactor()\n    });\n\n    _this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n\n    _this._readyState = \"closed\";\n    _this.uri = uri;\n\n    var _parser = opts.parser || parser;\n\n    _this.encoder = new _parser.Encoder();\n    _this.decoder = new _parser.Decoder();\n    _this._autoConnect = opts.autoConnect !== false;\n    if (_this._autoConnect) _this.open();\n    return _this;\n  }\n\n  _createClass(Manager, [{\n    key: \"reconnection\",\n    value: function reconnection(v) {\n      if (!arguments.length) return this._reconnection;\n      this._reconnection = !!v;\n      return this;\n    }\n  }, {\n    key: \"reconnectionAttempts\",\n    value: function reconnectionAttempts(v) {\n      if (v === undefined) return this._reconnectionAttempts;\n      this._reconnectionAttempts = v;\n      return this;\n    }\n  }, {\n    key: \"reconnectionDelay\",\n    value: function reconnectionDelay(v) {\n      if (v === undefined) return this._reconnectionDelay;\n      this._reconnectionDelay = v;\n      this.backoff && this.backoff.setMin(v);\n      return this;\n    }\n  }, {\n    key: \"randomizationFactor\",\n    value: function randomizationFactor(v) {\n      if (v === undefined) return this._randomizationFactor;\n      this._randomizationFactor = v;\n      this.backoff && this.backoff.setJitter(v);\n      return this;\n    }\n  }, {\n    key: \"reconnectionDelayMax\",\n    value: function reconnectionDelayMax(v) {\n      if (v === undefined) return this._reconnectionDelayMax;\n      this._reconnectionDelayMax = v;\n      this.backoff && this.backoff.setMax(v);\n      return this;\n    }\n  }, {\n    key: \"timeout\",\n    value: function timeout(v) {\n      if (!arguments.length) return this._timeout;\n      this._timeout = v;\n      return this;\n    }\n    /**\n     * Starts trying to reconnect if reconnection is enabled and we have not\n     * started reconnecting yet\n     *\n     * @private\n     */\n\n  }, {\n    key: \"maybeReconnectOnOpen\",\n    value: function maybeReconnectOnOpen() {\n      // Only try to reconnect if it's the first time we're connecting\n      if (!this._reconnecting && this._reconnection && this.backoff.attempts === 0) {\n        // keeps reconnection from firing twice for the same reconnection loop\n        this.reconnect();\n      }\n    }\n    /**\n     * Sets the current transport `socket`.\n     *\n     * @param {Function} fn - optional, callback\n     * @return {Manager} self\n     * @public\n     */\n\n  }, {\n    key: \"open\",\n    value: function open(fn) {\n      var _this2 = this;\n\n      debug(\"readyState %s\", this._readyState);\n      if (~this._readyState.indexOf(\"open\")) return this;\n      debug(\"opening %s\", this.uri);\n      this.engine = eio(this.uri, this.opts);\n      var socket = this.engine;\n      var self = this;\n      this._readyState = \"opening\";\n      this.skipReconnect = false; // emit `open`\n\n      var openSub = on_1.on(socket, \"open\", function () {\n        self.onopen();\n        fn && fn();\n      }); // emit `error`\n\n      var errorSub = on_1.on(socket, \"error\", function (err) {\n        debug(\"error\");\n        self.cleanup();\n        self._readyState = \"closed\";\n\n        _get(_getPrototypeOf(Manager.prototype), \"emit\", _this2).call(_this2, \"error\", err);\n\n        if (fn) {\n          fn(err);\n        } else {\n          // Only do this if there is no fn to handle the error\n          self.maybeReconnectOnOpen();\n        }\n      });\n\n      if (false !== this._timeout) {\n        var timeout = this._timeout;\n        debug(\"connect attempt will timeout after %d\", timeout);\n\n        if (timeout === 0) {\n          openSub.destroy(); // prevents a race condition with the 'open' event\n        } // set timer\n\n\n        var timer = setTimeout(function () {\n          debug(\"connect attempt timed out after %d\", timeout);\n          openSub.destroy();\n          socket.close();\n          socket.emit(\"error\", new Error(\"timeout\"));\n        }, timeout);\n        this.subs.push({\n          destroy: function destroy() {\n            clearTimeout(timer);\n          }\n        });\n      }\n\n      this.subs.push(openSub);\n      this.subs.push(errorSub);\n      return this;\n    }\n    /**\n     * Alias for open()\n     *\n     * @return {Manager} self\n     * @public\n     */\n\n  }, {\n    key: \"connect\",\n    value: function connect(fn) {\n      return this.open(fn);\n    }\n    /**\n     * Called upon transport open.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onopen\",\n    value: function onopen() {\n      debug(\"open\"); // clear old subs\n\n      this.cleanup(); // mark as open\n\n      this._readyState = \"open\";\n\n      _get(_getPrototypeOf(Manager.prototype), \"emit\", this).call(this, \"open\"); // add new subs\n\n\n      var socket = this.engine;\n      this.subs.push(on_1.on(socket, \"data\", bind(this, \"ondata\")));\n      this.subs.push(on_1.on(socket, \"ping\", bind(this, \"onping\")));\n      this.subs.push(on_1.on(socket, \"error\", bind(this, \"onerror\")));\n      this.subs.push(on_1.on(socket, \"close\", bind(this, \"onclose\")));\n      this.subs.push(on_1.on(this.decoder, \"decoded\", bind(this, \"ondecoded\")));\n    }\n    /**\n     * Called upon a ping.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onping\",\n    value: function onping() {\n      _get(_getPrototypeOf(Manager.prototype), \"emit\", this).call(this, \"ping\");\n    }\n    /**\n     * Called with data.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"ondata\",\n    value: function ondata(data) {\n      this.decoder.add(data);\n    }\n    /**\n     * Called when parser fully decodes a packet.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"ondecoded\",\n    value: function ondecoded(packet) {\n      _get(_getPrototypeOf(Manager.prototype), \"emit\", this).call(this, \"packet\", packet);\n    }\n    /**\n     * Called upon socket error.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onerror\",\n    value: function onerror(err) {\n      debug(\"error\", err);\n\n      _get(_getPrototypeOf(Manager.prototype), \"emit\", this).call(this, \"error\", err);\n    }\n    /**\n     * Creates a new socket for the given `nsp`.\n     *\n     * @return {Socket}\n     * @public\n     */\n\n  }, {\n    key: \"socket\",\n    value: function socket(nsp, opts) {\n      var socket = this.nsps[nsp];\n\n      if (!socket) {\n        socket = new socket_1.Socket(this, nsp, opts);\n        this.nsps[nsp] = socket;\n        var self = this;\n        socket.on(\"connecting\", onConnecting);\n\n        if (this._autoConnect) {\n          // manually call here since connecting event is fired before listening\n          onConnecting();\n        }\n      }\n\n      function onConnecting() {\n        if (!~self.connecting.indexOf(socket)) {\n          self.connecting.push(socket);\n        }\n      }\n\n      return socket;\n    }\n    /**\n     * Called upon a socket close.\n     *\n     * @param {Socket} socket\n     * @private\n     */\n\n  }, {\n    key: \"_destroy\",\n    value: function _destroy(socket) {\n      var index = this.connecting.indexOf(socket);\n      if (~index) this.connecting.splice(index, 1);\n      if (this.connecting.length) return;\n\n      this._close();\n    }\n    /**\n     * Writes a packet.\n     *\n     * @param {Object} packet\n     * @private\n     */\n\n  }, {\n    key: \"_packet\",\n    value: function _packet(packet) {\n      debug(\"writing packet %j\", packet);\n      if (packet.query && packet.type === 0) packet.nsp += \"?\" + packet.query;\n      var encodedPackets = this.encoder.encode(packet);\n\n      for (var i = 0; i < encodedPackets.length; i++) {\n        this.engine.write(encodedPackets[i], packet.options);\n      }\n    }\n    /**\n     * Clean up transport subscriptions and packet buffer.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"cleanup\",\n    value: function cleanup() {\n      debug(\"cleanup\");\n      var subsLength = this.subs.length;\n\n      for (var i = 0; i < subsLength; i++) {\n        var sub = this.subs.shift();\n        sub.destroy();\n      }\n\n      this.decoder.destroy();\n    }\n    /**\n     * Close the current socket.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_close\",\n    value: function _close() {\n      debug(\"disconnect\");\n      this.skipReconnect = true;\n      this._reconnecting = false;\n\n      if (\"opening\" === this._readyState) {\n        // `onclose` will not fire because\n        // an open event never happened\n        this.cleanup();\n      }\n\n      this.backoff.reset();\n      this._readyState = \"closed\";\n      if (this.engine) this.engine.close();\n    }\n    /**\n     * Alias for close()\n     *\n     * @private\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      return this._close();\n    }\n    /**\n     * Called upon engine close.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onclose\",\n    value: function onclose(reason) {\n      debug(\"onclose\");\n      this.cleanup();\n      this.backoff.reset();\n      this._readyState = \"closed\";\n\n      _get(_getPrototypeOf(Manager.prototype), \"emit\", this).call(this, \"close\", reason);\n\n      if (this._reconnection && !this.skipReconnect) {\n        this.reconnect();\n      }\n    }\n    /**\n     * Attempt a reconnection.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"reconnect\",\n    value: function reconnect() {\n      var _this3 = this;\n\n      if (this._reconnecting || this.skipReconnect) return this;\n      var self = this;\n\n      if (this.backoff.attempts >= this._reconnectionAttempts) {\n        debug(\"reconnect failed\");\n        this.backoff.reset();\n\n        _get(_getPrototypeOf(Manager.prototype), \"emit\", this).call(this, \"reconnect_failed\");\n\n        this._reconnecting = false;\n      } else {\n        var delay = this.backoff.duration();\n        debug(\"will wait %dms before reconnect attempt\", delay);\n        this._reconnecting = true;\n        var timer = setTimeout(function () {\n          if (self.skipReconnect) return;\n          debug(\"attempting reconnect\");\n\n          _get(_getPrototypeOf(Manager.prototype), \"emit\", _this3).call(_this3, \"reconnect_attempt\", self.backoff.attempts); // check again for the case socket closed in above events\n\n\n          if (self.skipReconnect) return;\n          self.open(function (err) {\n            if (err) {\n              debug(\"reconnect attempt error\");\n              self._reconnecting = false;\n              self.reconnect();\n\n              _get(_getPrototypeOf(Manager.prototype), \"emit\", _this3).call(_this3, \"reconnect_error\", err);\n            } else {\n              debug(\"reconnect success\");\n              self.onreconnect();\n            }\n          });\n        }, delay);\n        this.subs.push({\n          destroy: function destroy() {\n            clearTimeout(timer);\n          }\n        });\n      }\n    }\n    /**\n     * Called upon successful reconnect.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onreconnect\",\n    value: function onreconnect() {\n      var attempt = this.backoff.attempts;\n      this._reconnecting = false;\n      this.backoff.reset();\n\n      _get(_getPrototypeOf(Manager.prototype), \"emit\", this).call(this, \"reconnect\", attempt);\n    }\n  }]);\n\n  return Manager;\n}(Emitter);\n\nexports.Manager = Manager;","map":null,"metadata":{},"sourceType":"script"}